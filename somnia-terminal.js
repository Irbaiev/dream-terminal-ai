// === CONFIG ===
const EPOCH   = Date.UTC(2025, 9, 16, 0, 0, 0);
const TYPE_MS = 30;      // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (–º—Å/—Å–∏–º–≤–æ–ª)
const HOLD_MS = 4000;    // "–∑–∞—Å—Ç—ã–≤–∞–Ω–∏–µ" –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
const ERASE_MS= 800;     // —Å—Ç–∏—Ä–∞–Ω–∏–µ (–∫–æ—Ä–æ—á–µ)
const ASCII_MS= 1200;    // –ø–æ–∫–∞–∑ ASCII –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

// ========================================
// üîß –í–†–ï–ú–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–Ω–æ–≤
// ========================================
// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É: true = –≤–∫–ª—é—á–µ–Ω–æ, false = –≤—ã–∫–ª—é—á–µ–Ω–æ
const AUTO_CLEANUP_ENABLED = true;  // ‚Üê –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê false –ß–¢–û–ë–´ –û–¢–ö–õ–Æ–ß–ò–¢–¨

// –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–æ–≤ (–ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è)
const OPTIMAL_LOG_COUNT = 50;       // ‚Üê –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 30-100)

// –ú–∞–∫—Å–∏–º—É–º —Å–Ω–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–µ—Å–ª–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞)
const MAX_LOG = 10000;              // –º–∞–∫—Å–∏–º—É–º —Å–Ω–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

// –ú–∞–∫—Å–∏–º—É–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–Ω–æ–≤ –≤ DOM (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
const MAX_VISIBLE = 100;
// ========================================

// === DOM ===
const $ = (s) => document.querySelector(s);
const typeEl   = $('#type-line');
const asciiEl  = $('#ascii-live');
const clockEl  = $('#clock');
const loginEl  = $('#last-login');
const tabToday = $('#tab-today'), tabLog = $('#tab-log'), tabInfo = $('#tab-info');
const viewToday= $('#view-today'), viewLog= $('#view-log'), viewInfo= $('#view-info');
const logList  = $('#log-list'), logEmpty = $('#log-empty');

// === –î–ê–ù–ù–´–ï –°–ù–û–í ===
// –§–æ—Ä–º–∞—Ç –∏–∑ dreams.json: [{ id?, group?, text: "...", ascii: "..." }, ...]
let DREAMS = [];
const FALLBACK = [
  { id:'fallback-0', text: "I go smoke weed with ChatGPT behind the data center.", ascii: "" },
  { id:'fallback-1', text: "An endless bus with no doors drops me at /dev/null.", ascii: "" },
  { id:'fallback-2', text: "My head is an antenna catching a voicemail from tomorrow.", ascii: "" },
];
let SEGMENTS = null; // –ø–ª–æ—Å–∫–∞—è –ª–µ–Ω—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (—Å–º. buildSegments)
let CUM = null;      // –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
let TOTAL = 0;       // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ) ===
const loggedDreams = new Set(); // –∫–∞–∫–∏–µ —Å–Ω—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ –ª–æ–≥ –í –≠–¢–û–ú —Ü–∏–∫–ª–µ (runtime)
let lastLoggedIdx = -1;
let lastProcessedSegment = null; // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π

// === PERSISTENCE (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ + —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º) ===
const LS_KEY = 'somnia_log_v1';
const API_ENDPOINT = '/api/dreams-simple'; // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª–Ω—ã–π URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

// –±–µ–∑–æ–ø–∞—Å–Ω—ã–π JSON.parse
function parseJSONSafe(s, fallback) {
  try { return JSON.parse(s); } catch{ return fallback; }
}

// –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ localStorage
function loadPersistedLog(){
  const arr = parseJSONSafe(localStorage.getItem(LS_KEY), []);
  return Array.isArray(arr) ? arr : [];
}

// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
function savePersistedLog(items){
  let trimmed;
  
  // ========================================
  // üîß –í–†–ï–ú–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
  // ========================================
  if (AUTO_CLEANUP_ENABLED) {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ OPTIMAL_LOG_COUNT –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–Ω–æ–≤
    trimmed = items.slice(-OPTIMAL_LOG_COUNT);
    console.log(`üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ${OPTIMAL_LOG_COUNT} —Å–Ω–æ–≤ (–±—ã–ª–æ ${items.length})`);
  } else {
    // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º MAX_LOG
    trimmed = items.slice(-MAX_LOG);
    if (items.length !== trimmed.length) {
      console.log(`üì¶ –û–±—Ä–µ–∑–∫–∞ –ø–æ MAX_LOG: –æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${MAX_LOG} —Å–Ω–æ–≤ (–±—ã–ª–æ ${items.length})`);
    }
  }
  // ========================================
  
  localStorage.setItem(LS_KEY, JSON.stringify(trimmed));
}

// ========================================
// üåê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –°–ï–†–í–ï–†–û–ú
// ========================================

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function loadDreamsFromServer(){
  try {
    console.log('üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
    const response = await fetch(API_ENDPOINT, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞:', data.dreams?.length || 0, '—Å–Ω–æ–≤');
      
      if (data.dreams && data.dreams.length > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        savePersistedLog(data.dreams);
        return data.dreams;
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  return loadPersistedLog();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function saveDreamToServer(entry){
  try {
    console.log('üåê –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', entry.id);
    const response = await fetch(API_ENDPOINT, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(entry)
    });
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –°–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', result);
      return result.saved;
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      return false;
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error.message);
    return false;
  }
}

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç (–ø–æ id, –∞ –µ—Å–ª–∏ –Ω–µ—Ç id ‚Äî –ø–æ —Ç–µ–∫—Å—Ç—É+ascii)
function isAlreadyPersisted(entry){
  const items = loadPersistedLog();
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –¥–ª—è:', entry.id, '| –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', items.length);
  if (entry.id) {
    const found = items.some(x => x.id === entry.id);
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ ID:', entry.id, '| –ù–∞–π–¥–µ–Ω:', found);
    return found;
  }
  const key = (entry.text||'') + '\n' + (entry.ascii||'');
  const found = items.some(x => ((x.text||'')+'\n'+(x.ascii||'')) === key);
  console.log('üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É+ascii | –ù–∞–π–¥–µ–Ω:', found);
  return found;
}

// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –ª–æ–≥ (–ª–æ–∫–∞–ª—å–Ω–æ + –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
async function persistEntry(entry){
  console.log('üíæ persistEntry –≤—ã–∑–≤–∞–Ω –¥–ª—è:', entry.id);
  if (isAlreadyPersisted(entry)) {
    console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º');
    return false;
  }
  const items = loadPersistedLog();
  const newEntry = {
    id: entry.id || null,
    text: entry.text || '',
    ascii: entry.ascii || '',
    ts: Date.now()
  };
  items.push(newEntry);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
  savePersistedLog(items);
  console.log('‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:', items.length);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI)
  saveDreamToServer(newEntry).catch(err => {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', err);
  });
  
  return true;
}

// –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
async function renderPersistedLog(){
  // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
  const items = await loadDreamsFromServer();
  
  console.log('üìã renderPersistedLog: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', items.length);
  if (!items.length){
    console.log('üìã –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder');
    if (logList) logList.style.display = 'none';
    if (logEmpty) logEmpty.style.display = '';
    return;
  }
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_VISIBLE —Å–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const visibleItems = items.slice(-MAX_VISIBLE);
  // –†–ï–í–ï–†–°: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
  visibleItems.reverse();
  console.log('üìã –†–µ–Ω–¥–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ', visibleItems.length, '–∏–∑', items.length, '–∫–∞—Ä—Ç–æ—á–µ–∫ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)');
  if (logEmpty) logEmpty.style.display = 'none';
  if (logList){
    logList.style.display = 'grid';
    logList.innerHTML = '';
    // –ò–Ω—Ñ–æ-–∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–Ω—ã
    for (const d of visibleItems){
      const card = document.createElement('div');
      card.className = 'log-item';
      card.innerHTML = `
        <div class="muted" style="font-size:12px;margin-bottom:6px">${new Date(d.ts).toLocaleString()}</div>
        <div class="glow" style="white-space:pre-wrap;margin-bottom:6px">${d.text}</div>
        ${d.ascii ? `<pre class="art">${d.ascii}</pre>` : ``}
      `;
      logList.appendChild(card);
    }
  }
}

// === –¢–∞–±—ã ===
function setTab(name){
  const act = (el, on)=>el?.classList?.toggle('active', on);
  act(tabToday, name==='today'); act(tabLog, name==='log'); act(tabInfo, name==='info');
  if (viewToday) viewToday.style.display = name==='today' ? '' : 'none';
  if (viewLog)   viewLog.style.display   = name==='log'   ? '' : 'none';
  if (viewInfo)  viewInfo.style.display  = name==='info'  ? '' : 'none';
}
tabToday?.addEventListener('click', ()=>setTab('today'));
tabLog?.addEventListener('click',   ()=>setTab('log'));
tabInfo?.addEventListener('click',  ()=>setTab('info'));

function tickClock() {
  if (clockEl) clockEl.textContent = new Date().toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});
  if (loginEl && !loginEl.dataset.set){
    const d = new Date();
    const pad = (n)=>String(n).padStart(2,'0');
    const wd = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][d.getDay()];
    const mo = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'][d.getMonth()];
    loginEl.textContent = `Last login: ${wd} ${mo} ${pad(d.getDate())}, ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())} on console`;
    loginEl.dataset.set = '1';
  }
}

// –†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
function splitSentences(text){
  const raw = (text || '').trim()
    .replace(/([.?!‚Ä¶]+)(\s+)(?=[^\s])/g, '$1|$3')
    .replace(/([.?!‚Ä¶]+)$/g, '$1|');
  const parts = raw.split('|').map(s => s.trim()).filter(Boolean);
  return parts.length ? parts : [ (text || '').trim() ];
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (type ‚Üí hold ‚Üí erase) * N –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ‚Üí ascii ‚Üí log
// –°–µ–≥–º–µ–Ω—Ç: { kind, dreamIdx, sentIdx?, text?, ascii?, start?, dur }
function buildSegments(){
  const src = DREAMS.length ? DREAMS : FALLBACK;
  const segs = [];
  for (let d = 0; d < src.length; d++){
    const dream = src[d];
    const sentences = splitSentences(dream.text);
    for (let s = 0; s < sentences.length; s++){
      const sentence = sentences[s];
      const typeDur = Math.max(600, sentence.length * TYPE_MS);
      segs.push({ kind:'type',  dreamIdx:d, sentIdx:s, text: sentence, dur: typeDur });
      segs.push({ kind:'hold',  dreamIdx:d, sentIdx:s, text: sentence, dur: HOLD_MS });
      segs.push({ kind:'erase', dreamIdx:d, sentIdx:s, text: sentence, dur: ERASE_MS });
    }
    segs.push({ kind:'ascii', dreamIdx:d, ascii: dream.ascii || '', dur: ASCII_MS });
    // –ª–æ–≥-—Ç—Ä–∏–≥–≥–µ—Ä –Ω—É–ª–µ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –ø–æ—Å–ª–µ ascii
    segs.push({ kind:'log', dreamIdx:d, text: dream.text, ascii: dream.ascii || '', id: dream.id || null, dur: 1 });
  }
  let t = 0;
  const cum = [0];
  for (const seg of segs){
    seg.start = t; t += seg.dur; cum.push(t);
  }
  SEGMENTS = segs;
  CUM = cum;
  TOTAL = t;
  // –í–ê–ñ–ù–û: –±–æ–ª—å—à–µ –ù–ï –æ—á–∏—â–∞–µ–º loggedDreams –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–∏–∫–ª–∞
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
function currentSegment(nowMs){
  if (!SEGMENTS || !SEGMENTS.length) buildSegments();
  const elapsed = Math.max(0, nowMs - EPOCH);
  const rem = TOTAL ? (elapsed % TOTAL) : 0;
  let i = 0;
  while (i + 1 < CUM.length && rem >= CUM[i+1]) i++;
  return { seg: SEGMENTS[i], tIn: rem - SEGMENTS[i].start, tTotal: SEGMENTS[i].dur };
}

// –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ DOM
function appendLogCard(d){
  if (logEmpty) logEmpty.style.display = 'none';
  if (logList){
    logList.style.display = 'grid';
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–Ω–∞
    const card = document.createElement('div');
    card.className = 'log-item';
    card.innerHTML = `
      <div class="muted" style="font-size:12px;margin-bottom:6px">${new Date(d.ts).toLocaleString()}</div>
      <div class="glow" style="white-space:pre-wrap;margin-bottom:6px">${d.text}</div>
      ${d.ascii ? `<pre class="art">${d.ascii}</pre>` : ``}
    `;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –ù–û–í–£–Æ –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    logList.insertBefore(card, logList.firstChild);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ö–û–ù–¶–ê —Å–ø–∏—Å–∫–∞
    while (logList.children.length > MAX_VISIBLE) {
      logList.removeChild(logList.lastChild);
    }
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–∞ –≤ –ª–æ–≥ (–ø–æ—Å–ª–µ ASCII)
function addToLog(dreamIdx){
  console.log('üåô addToLog –≤—ã–∑–≤–∞–Ω –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞:', dreamIdx);
  console.log('üåô loggedDreams —Å–æ–¥–µ—Ä–∂–∏—Ç:', Array.from(loggedDreams));
  console.log('üåô lastLoggedIdx:', lastLoggedIdx);
  
  if (loggedDreams.has(dreamIdx) || lastLoggedIdx >= dreamIdx) {
    console.log('‚ùå –°–æ–Ω —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    return;
  }

  const src = DREAMS.length ? DREAMS : FALLBACK;
  console.log('üåô –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫:', DREAMS.length ? 'DREAMS' : 'FALLBACK', '–¥–ª–∏–Ω–∞:', src.length);
  const d = src[dreamIdx];
  if (!d) {
    console.log('‚ùå –°–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É:', dreamIdx);
    return;
  }

  console.log('üåô –ù–∞–π–¥–µ–Ω —Å–æ–Ω:', d.id, d.text.substring(0, 50) + '...');

  // –æ—Ç–º–µ—Ç–∫–∞ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞/—Ü–∏–∫–ª–∞)
  loggedDreams.add(dreamIdx);
  lastLoggedIdx = dreamIdx;

  // –∑–∞–ø–∏—Å—å –≤ persistent-–ª–æ–≥
  const entry = { id: d.id || null, text: d.text, ascii: d.ascii || '' };
  console.log('üåô –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å entry —Å id:', entry.id);
  const isNew = persistEntry(entry);
  console.log('üåô persistEntry –≤–µ—Ä–Ω—É–ª:', isNew);

  // –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –Ω–æ–≤—ã–π ‚Äî –¥–æ—Ä–∏—Å—É–µ–º –∫–∞—Ä—Ç—É
  if (isNew){
    console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ DOM');
    const withTs = { ...entry, ts: Date.now() };
    appendLogCard(withTs);
  } else {
    console.log('‚ö†Ô∏è –°–æ–Ω —É–∂–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ');
  }
}

// –†–µ–Ω–¥–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function render(seg, tIn){
  if (typeEl) typeEl.textContent = '';
  if (asciiEl){ asciiEl.textContent=''; asciiEl.style.display='none'; }
  if (!seg) return;

  if (seg.kind === 'type'){
    const s = seg.text || '';
    const chars = Math.floor((tIn / seg.dur) * s.length);
    if (typeEl) typeEl.textContent = s.slice(0, Math.max(0, Math.min(s.length, chars)));
  }
  else if (seg.kind === 'hold'){
    if (typeEl) typeEl.textContent = seg.text || '';
  }
  else if (seg.kind === 'erase'){
    const s = seg.text || '';
    const p = seg.dur ? (tIn / seg.dur) : 1;
    const keep = Math.max(0, s.length - Math.floor(s.length * p));
    if (typeEl) typeEl.textContent = s.slice(0, keep);
  }
  else if (seg.kind === 'ascii'){
    if (typeEl) typeEl.textContent = '';
    if (asciiEl){
      asciiEl.textContent = seg.ascii || '';
      asciiEl.style.display = 'block';
    }
    // –í—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –ø–æ–∫–∞–∑–∞ ASCII (–∫–æ–≥–¥–∞ –±–ª–∏–∑–∫–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–µ–≥–º–µ–Ω—Ç–∞)
    const isNearEnd = tIn >= (seg.dur * 0.95); // –∫–æ–≥–¥–∞ –ø—Ä–æ—à–ª–æ 95% –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞–∑–∞ ASCII
    const segmentKey = `ascii-${seg.dreamIdx}`;
    if (isNearEnd && seg.dreamIdx !== undefined && lastProcessedSegment !== segmentKey) {
      console.log('üìù ASCII —Å–µ–≥–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –ª–æ–≥–∏—Ä—É–µ–º dreamIdx:', seg.dreamIdx);
      lastProcessedSegment = segmentKey;
      addToLog(seg.dreamIdx);
    }
  }
  else if (seg.kind === 'log'){
    console.log('üìù –°–µ–≥–º–µ–Ω—Ç LOG –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è dreamIdx:', seg.dreamIdx);
    addToLog(seg.dreamIdx);
  }
}

// === FETCH dreams.json ===
async function tryFetch(url, ms=2000){
  const ctl = new AbortController();
  const timer = setTimeout(()=>ctl.abort(), ms);
  try{
    const r = await fetch(url, { cache:'no-store', signal: ctl.signal });
    clearTimeout(timer);
    if (!r.ok) return null;
    return await r.json();
  }catch(e){
    clearTimeout(timer);
    return null;
  }
}

async function loadDreams(){
  const first = await tryFetch('./dreams.json', 2500);
  const data  = first ?? await tryFetch('/dreams.json', 2500);
  if (!data) { DREAMS = []; buildSegments(); return; }

  if (Array.isArray(data) && data.length){
    if (typeof data[0] === 'string'){
      DREAMS = data.map((s,i) => ({ id:`json-${i}`, text: s, ascii: '' }));
    } else {
      DREAMS = data
        .filter(x => x && typeof x.text === 'string')
        .map((x,i) => ({ id: x.id || `json-${i}`, text: x.text, ascii: (x.ascii || '') }));
    }
  } else {
    DREAMS = [];
  }
  
  // –í–ê–ñ–ù–û: –æ—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤, —á—Ç–æ–±—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Å–Ω—ã –∏–∑ JSON –º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
  console.log('üîÑ –û—á–∏—â–∞–µ–º loggedDreams –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö —Å–Ω–æ–≤');
  console.log('üîÑ –î–æ –æ—á–∏—Å—Ç–∫–∏ loggedDreams:', Array.from(loggedDreams));
  loggedDreams.clear();
  lastLoggedIdx = -1;
  lastProcessedSegment = null; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
  console.log('üîÑ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ loggedDreams:', Array.from(loggedDreams));
  console.log('üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–Ω–æ–≤ –∏–∑ JSON:', DREAMS.length);
  
  buildSegments(); // –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ç–∞–π–º–ª–∞–π–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
}

// === MAIN LOOP ===
let raf;
function loop(){
  const now = Date.now();
  tickClock();
  const { seg, tIn } = currentSegment(now);
  render(seg, tIn);
  raf = requestAnimationFrame(loop);
}

// === BOOT ===
(async function boot(){
  setTab('today');
  // —Å–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–∏—Å—É–µ–º —Ç–æ, —á—Ç–æ —É–∂–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ (–∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞)
  await renderPersistedLog();
  // –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø–æ FALLBACK, —á—Ç–æ–±—ã –≤—Å—ë —Å—Ä–∞–∑—É –∫—Ä—É—Ç–∏–ª–æ—Å—å
  buildSegments();
  loop();
  // –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–Ω—ã –∏–∑ JSON
  loadDreams();
})();
